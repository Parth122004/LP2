import tkinter as tk

# Knowledge base (facts)
facts = {
    "Monday": {
        "pump_working": False,
        "power_in_passage": False,
        "maintenance_pending": True
    },
    "Tuesday": {
        "pump_working": True,
        "power_in_passage": True,
        "maintenance_pending": False
    }
}

# Rule-based reasoning engine
def expert_system_response(query):
    query = query.lower()

    if "water" in query and "monday" in query:
        if not facts["Monday"]["pump_working"]:
            return "There was no water supply on Monday because the water pump was not working."
        elif facts["Monday"]["maintenance_pending"]:
            return "No water due to pending maintenance on Monday."
        else:
            return "Water supply issue on Monday is under investigation."

    elif "lights" in query and "passage" in query:
        if not facts["Monday"]["power_in_passage"]:
            return "There were no lights in the common passage because of a power outage."
        elif facts["Monday"]["maintenance_pending"]:
            return "Lights were out due to pending maintenance."
        else:
            return "Lighting issue in the passage is being investigated."

    return "Sorry, I don't have an answer for that."

# GUI using Tkinter
def send():
    user_input = entry.get()
    chat_log.insert(tk.END, f"You: {user_input}\n")
    response = expert_system_response(user_input)
    chat_log.insert(tk.END, f"Bot: {response}\n\n")
    entry.delete(0, tk.END)

# GUI Window Setup
window = tk.Tk()
window.title("Society Maintenance Expert System")

chat_log = tk.Text(window, height=20, width=80)
chat_log.pack()

entry = tk.Entry(window, width=80)
entry.pack()

button = tk.Button(window, text="Ask", command=send)
button.pack()

chat_log.insert(tk.END, "Bot: Hello! Ask me about water or lighting issues.\n\n")

window.mainloop()

#GUI window opens. Try asking:

#Why was there no water supply on Monday?

#Why were there no lights in common passage?




#Q1. What type of expert system is this?
#A: It’s a rule-based expert system using if-then logic to answer queries.

#Q2. What is knowledge representation?
#A: It refers to how facts and rules are stored in a format the system can reason about. Here, we use Python dictionaries and conditionals.

#Q3. How is knowledge acquired?
#A: Knowledge is gathered from domain experts or general understanding of problems and encoded into rules.

#Q4. What are examples of rules used?
#A:

#If pump_working == False → No water supply.

#If power_in_passage == False → No lighting in passage.

#Q5. What are limitations of this system?
#A:

#Limited flexibility.

#Can only answer pre-encoded issues.

#Doesn’t learn dynamically.



#Explains why there was no water supply on a specific day.
#Explains why lights were not functioning in common areas.

#Uses basic rules for diagnosis.

#Uses Tkinter for a simple user interface.
