#include <iostream> 
#include <vector> 
#include <unordered_map> 
#include <set> 
#include <queue> 
#include <stack> 
#include <functional> 
#include <string> 
 
using namespace std; 
 
class Graph { 
private: 
    unordered_map<int, vector<int>> adjacencyList; 
//Represents the graph as an adjacency list (unordered_map maps a vertex to its neighbors). 
public: 
    Graph() = default; 
 
    Graph(const unordered_map<int, vector<int>>& adjList) { 
        adjacencyList = adjList; 
    } 
    //Default constructor and one that takes a predefined adjacency list
    void addVertex(int vertex) { 
        if (adjacencyList.find(vertex) == adjacencyList.end()) { 
            adjacencyList[vertex] = vector<int>(); 
        } 
    } 
    //Adds a vertex if not already present.
    void addEdge(int vertex1, int vertex2) { 
        addVertex(vertex1); 
        addVertex(vertex2); 
        adjacencyList[vertex1].push_back(vertex2); 
        adjacencyList[vertex2].push_back(vertex1); 
    } 
    //Adds an edge (both directions, since undirected). Uses addVertex to ensure both nodes exist
    void printGraph() { 
        cout << "\nGraph representation (Adjacency List):" << endl; 
        for (const auto& pair : adjacencyList) { 
            cout << pair.first << " -> "; 
            for (int neighbor : pair.second) { 
                cout << neighbor << " "; 
            } 
            cout << endl; 
        } 
    } 
    //Prints the adjacency list.
    void dfsRecursiveHelper(int vertex, set<int>& visited, vector<int>& result,int level) { 
        visited.insert(vertex); 
        result.push_back(vertex); 
        cout<<"Node: "<<vertex<<" Level: "<<level<<endl; 
        for (int neighbor : adjacencyList[vertex]) { 
            if (visited.find(neighbor) == visited.end()) { 
                dfsRecursiveHelper(neighbor, visited, result,level+1); 
            } 
        } 
    } 
    /*Recursively visits nodes using depth-first logic.Tracks and prints levels.
    Uses a set to track visited nodes*/
    vector<int> dfsRecursive(int startVertex) { 
        set<int> visited; 
        vector<int> result; 
         
        dfsRecursiveHelper(startVertex, visited, result,0); 
        return result; 
    } 
 
    vector<int> dfsNonRecursive(int startVertex) { 
        vector<int> result; 
        set<int> visited; 
        stack<int> stack; 
        stack.push(startVertex); 
        while (!stack.empty()) { 
            int currentVertex = stack.top(); 
            stack.pop(); 
            if (visited.find(currentVertex) != visited.end()) continue; 
            visited.insert(currentVertex); 
            result.push_back(currentVertex); 
            for (int i = adjacencyList[currentVertex].size() - 1; i >= 0; i--) { 
                int neighbor = adjacencyList[currentVertex][i]; 
                if (visited.find(neighbor) == visited.end()) { 
                    stack.push(neighbor); 
                } 
            } 
        } 
        return result; 
    }
    //Stack-based implementation.Simulates recursion and avoids re-visiting nodes. 
 
    vector<int> bfs(int startVertex) { 
        vector<int> result; 
        set<int> visited; 
        queue<pair<int,int>> queue; 
        visited.insert(startVertex); 
        queue.push({startVertex,0}); 
        while (!queue.empty()) { 
            int currentVertex = queue.front().first; 
            int level = queue.front().second; 
            queue.pop(); 
            result.push_back(currentVertex); 
            cout<<"Node: "<<currentVertex<<" Level: "<<level<<endl; 
            for (int neighbor : adjacencyList[currentVertex]) { 
                if (visited.find(neighbor) == visited.end()) { 
                    visited.insert(neighbor); 
                    queue.push({neighbor,level+1}); 
                } 
            } 
        } 
        return result; 
    } 
 //Uses a queue and tracks level for each node.
//Useful for shortest path in unweighted graphs

    bool dlsRecursiveHelper(int vertex, int target, int depthLimit, set<int>& visited, 
vector<int>& result) { 
        if (vertex == target) { 
            result.push_back(vertex); 
            return true; 
        } 
        if (depthLimit <= 0) return false; 
        visited.insert(vertex); 
        result.push_back(vertex); 
        for (int neighbor : adjacencyList[vertex]) { 
            if (visited.find(neighbor) == visited.end()) { 
                bool found = dlsRecursiveHelper(neighbor, target, depthLimit - 1, visited, result); 
                if (found) return true; 
            } 
        } 
        result.pop_back(); 
        visited.erase(vertex); 
        return false; 
    } 
    //Stops recursion if depth limit is reached.
    //Returns path if target found. 


    vector<int> depthLimitedSearch(int startVertex, int target, int depthLimit) { 
        set<int> visited; 
        vector<int> result; 
        bool found = dlsRecursiveHelper(startVertex, target, depthLimit, visited, result); 
        if (!found) result.clear(); 
        return result; 
    } 
 
    vector<int> iterativeDeepeningDFS(int startVertex, int target, int maxDepth) { 
        vector<int> result; 
        for (int depth = 0; depth <= maxDepth; depth++) { 
            cout << "Trying depth limit: " << depth << endl; 
            result = depthLimitedSearch(startVertex, target, depth); 
            if (!result.empty()) return result; 
        } 
        return result; 
    } 
}; 
//Calls DLS repeatedly with increasing depth.
//Combines DFS space-efficiency with BFS completeness. 

void printTraversal(const vector<int>& traversal, const string& traversalType) { 
    cout << traversalType << " traversal result: "; 
    for (int vertex : traversal) { 
        cout << vertex << " "; 
    } 
    cout << endl; 
} 

int main() { 
    Graph* g = nullptr; 
    int choice; 
    int vertex1, vertex2, startVertex, targetVertex, depthLimit, maxDepth; 
 
    do { 
        cout << "\nGraph Menu:\n"; 
        cout << "1. Initialize Graph\n"; 
        cout << "2. Add Edges\n"; 
        cout << "3. Print Graph\n"; 
        cout << "4. DFS (Recursive)\n"; 
        cout << "5. DFS (Non-Recursive)\n"; 
        cout << "6. BFS\n"; 
        cout << "7. Depth-Limited Search (DLS)\n"; 
        cout << "8. Iterative Deepening DFS (IDDFS)\n"; 
        cout << "9. Exit\n"; 
        cout << "Enter your choice: "; 
        cin >> choice; 
 
        switch (choice) { 
            case 1: 
                delete g; 
                g = new Graph(); 
                cout << "Graph initialized." << endl; 
                break; 
 
            case 2: 
                if (!g) {  
                    cout << "Please initialize the graph first.\n";  
                    break;  
                } 
                int numberOfEdges; 
                cout << "How many edges do you want to add? "; 
                cin >> numberOfEdges; 
                cout << "Enter " << numberOfEdges << " edges (format: vertex1 vertex2):" << 
endl; 
                for (int i = 0; i < numberOfEdges; ++i) { 
                    cin >> vertex1 >> vertex2; 
                    g->addEdge(vertex1, vertex2); 
                } 
                break; 
 
            case 3: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                g->printGraph(); 
                break; 
 
            case 4: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                cout << "Enter starting vertex for DFS (Recursive): "; 
                cin >> startVertex; 
                printTraversal(g->dfsRecursive(startVertex), "DFS (Recursive)"); 
                break; 
 
            case 5: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                cout << "Enter starting vertex for DFS (Non-Recursive): "; 
                cin >> startVertex; 
                printTraversal(g->dfsNonRecursive(startVertex), "DFS (Non-Recursive)"); 
                break; 
 
            case 6: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                cout << "Enter starting vertex for BFS: "; 
                cin >> startVertex; 
                printTraversal(g->bfs(startVertex), "BFS"); 
                break; 
 
            case 7: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                cout << "Enter starting vertex for DLS: "; 
                cin >> startVertex; 
                cout << "Enter target vertex: "; 
                cin >> targetVertex; 
                cout << "Enter depth limit: "; 
                cin >> depthLimit; 
                { 
                    vector<int> dlsResult = g->depthLimitedSearch(startVertex, targetVertex, 
depthLimit); 
                    if (dlsResult.empty()) { 
                        cout << "Target " << targetVertex << " not found within depth limit " << 
depthLimit << endl; 
                    } else { 
                        printTraversal(dlsResult, "DLS Path to Target " + to_string(targetVertex)); 
                    } 
                } 
                break; 
 
            case 8: 
                if (!g) { cout << "Please initialize the graph first.\n"; break; } 
                cout << "Enter starting vertex for IDDFS: "; 
                cin >> startVertex; 
                cout << "Enter target vertex: "; 
                cin >> targetVertex; 
                cout << "Enter maximum depth: "; 
                cin >> maxDepth; 
                { 
                    vector<int> iddfsResult = g->iterativeDeepeningDFS(startVertex, targetVertex, 
maxDepth); 
                    if (iddfsResult.empty()) { 
                        cout << "Target " << targetVertex << " not found within max depth " << 
maxDepth << endl; 
                    } else { 
                        printTraversal(iddfsResult, "IDDFS Path to Target " + to_string(targetVertex)); 
                    } 
                } 
                break; 
 
            case 9: 
                cout << "Exiting program." << endl; 
                break; 
 
            default: 
                cout << "Invalid choice. Please try again." << endl; 
        } 
    } while (choice != 9); 
 
    delete g; 
    return 0; 
} 
//cd "C:\Users\Parth\OneDrive\Desktop\Practical\LP2pd"
//g++ Bfdf.cpp -o Bfdf 
//.\Bfdf.exe

/*1 2 
1 6 
2 3 
2 4 
6 7 
6 8 
4 5 
7 5 
6 8*/

//time comp :O b^d (where b is branch factor(no. of branches) & d is depth )

/*
DFS (Depth First Search): Explores as far as possible along one branch before backtracking. Can be implemented recursively or with a stack.
BFS (Breadth First Search): Explores all neighbors at the current depth before moving to the next level. Uses a queue.
DLS: DFS with a depth limit to avoid infinite loops in cyclic/large graphs.
IDDFS: Combines the advantages of DFS (low memory) and BFS (completeness) by gradually increasing the depth.*/

//Q2: Why use Iterative Deepening DFS?
//A: It combines the low memory use of DFS with the completeness of BFS. Useful when depth is unknown.
//Q5: Is DFS complete and optimal?
//A: No. DFS is not guaranteed to find the shortest path or any path if there's a loop. BFS is complete and optimal in unweighted graphs
